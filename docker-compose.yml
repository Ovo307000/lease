version: "3.8"  # 指定 Docker Compose 文件格式版本，3.8 支持更多高级特性

services: # MySQL 服务配置
  lease-mysql:
    image: mysql:8.3.0                # 使用 MySQL 8.3.0 版本镜像
    container_name: lease-mysql       # 设置容器名称
    restart: always                   # 容器崩溃时自动重启
    environment:
      MYSQL_ROOT_PASSWORD: root       # 设置 MySQL root 用户密码（注意：生产环境应使用更安全的密码）
    ports:
      - "3306:3306"                   # 端口映射：主机端口:容器端口
    volumes:
      - mysql_data:/var/lib/mysql     # 数据持久化：将数据存储在名为 mysql_data 的卷中
    networks:
      - lease-network                 # 连接到 lease-network 网络
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s                   # 每 10 秒检查一次
      timeout: 5s                     # 检查超时时间
      retries: 5                      # 最大重试次数

  # Redis 服务配置
  lease-redis:
    image: redis:7.4.0                # 使用 Redis 7.4.0 版本镜像
    container_name: lease-redis       # 设置容器名称
    restart: always                   # 容器崩溃时自动重启
    ports:
      - "6379:6379"                   # 端口映射：主机端口:容器端口
    volumes:
      - redis_data:/data              # 数据持久化：将数据存储在名为 redis_data 的卷中
    networks:
      - lease-network                 # 连接到 lease-network 网络
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s                   # 每 10 秒检查一次
      timeout: 5s                     # 检查超时时间
      retries: 5                      # 最大重试次数

  # MinIO 服务配置
  lease-minio:
    image: minio/minio:RELEASE.2024-10-13T13-34-11Z  # 使用指定版本的 MinIO 镜像
    container_name: lease-minio       # 设置容器名称
    command: server /data --console-address ":9001"  # 启动 MinIO 服务器并指定控制台地址
    ports:
      - "9000:9000"                   # MinIO API 端口映射
      - "9001:9001"                   # MinIO 控制台端口映射
    environment:
      MINIO_ROOT_USER: minioadmin     # 设置 MinIO root 用户名
      MINIO_ROOT_PASSWORD: minioadmin # 设置 MinIO root 用户密码（注意：生产环境应使用更安全的密码）
    volumes:
      - minio_data:/data              # 数据持久化：将数据存储在名为 minio_data 的卷中
    restart: always                   # 容器崩溃时自动重启
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s                   # 每 30 秒检查一次
      timeout: 20s                    # 检查超时时间
      retries: 3                      # 最大重试次数

volumes:
  mysql_data:
    name: lease-mysql-data            # MySQL 数据卷
  redis_data:
    name: lease-redis-data            # Redis 数据卷
  minio_data:
    name: lease-minio-data            # MinIO 数据卷

networks:
  lease-network:
    name: lease-network               # 自定义网络，用于容器间通信
    driver: bridge                    # 使用桥接模式，适用于大多数场景