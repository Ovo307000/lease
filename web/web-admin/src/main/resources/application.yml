spring:
    datasource:
        type: com.zaxxer.hikari.HikariDataSource                    # 数据库连接池类型: HikariCP，一个高性能的 JDBC 连接池
        url: ${env.LEASE_ADMIN_SPRING_DATASOURCE_URL}               # 数据库连接地址: 从环境变量中获取，用于连接 MySQL 数据库
        username: ${env.LEASE_ADMIN_SPRING_DATASOURCE_USERNAME}     # 数据库登录用户名: 从环境变量中获取，用于连接 MySQL 数据库
        password: ${env.LEASE_ADMIN_SPRING_DATASOURCE_PASSWORD}     # 数据库登录密码: 从环境变量中获取，用于连接 MySQL 数据库
        driver-class-name: com.mysql.cj.jdbc.Driver                 # MySQL 驱动类名: 用于连接 MySQL 数据库的 JDBC 驱动
        hikari:
            connection-test-query: SELECT 1                         # 连接测试查询: 用于检查数据库连接是否仍然有效
            connection-timeout: 60000                               # 连接超时时间: 60 秒，即建立连接最多等待 1 分钟
            idle-timeout: 500000                                    # 空闲连接超时: 500 秒，即空闲连接在连接池中最多保留 8.3 分钟
            max-lifetime: 540000                                    # 连接最大生存时间: 540 秒，即一个连接在池中最多存在 9 分钟
            maximum-pool-size: 12                                   # 连接池最大大小: 最多同时维护 12 个数据库连接
            minimum-idle: 10                                        # 最小空闲连接: 连接池中至少保持 10 个空闲连接
            pool-name: SPHHikariPool                                # 连接池名称: 用于日志和监控，方便识别不同的连接池

    application:
        name: web-admin                                             # 应用名称: Web 管理端，用于 Loggers 日志记录
    servlet:
        multipart:
            max-file-size: ${storage.cloudflare.r2.max-file-sizeof-bytes}    # 最大文件大小: 10 GB，即最大支持上传 10 GB 的文件
            max-request-size: ${storage.cloudflare.r2.max-file-sizeof-bytes} # 最大请求大小: 10 GB，即最大支持上传 10 GB 的文件
    jackson:
        time-zone: GMT+8                                            # 时区: 中国标准时间，即 GMT+8
        date-format: yyyy-MM-dd HH:mm:ss                            # 日期格式: 年-月-日 时:分:秒

    data:
        redis:
            host: localhost                                         # Redis 主机地址: 本地 Redis 服务地址
            port: 6379                                              # Redis 默认端口号 6379
            database: 0                                             # Redis 数据库索引: 默认使用第 0 个数据库


mybatis-plus:
    configuration:
        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl       # SQL 日志实现: 将 MyBatis 生成的 SQL 语句打印到控制台，便于调试
    global-config:
        db-config:
            logic-delete-field: is_deleted                          # 逻辑删除字段: 数据表中表示删除状态的字段名 （如果 @TableLogic 注解用到了该字段
            logic-delete-value: 1                                   # 逻辑删除值: 表示数据已被删除的标记值
            logic-not-delete-value: 0                               # 逻辑未删除值: 表示数据未被删除的标记值

server:
    port: 8861                                                      # 应用服务端口: Web 应用监听的 HTTP 端口号，默认是 8080


storage:
    cloudflare:
        r2:
            access-key-id: ${env.CLOUDFLARE_R2_ACCESS_KEY_ID}           # Cloudflare R2 Access Key ID: 用于访问 Cloudflare R2 API 的 Access Key ID
            secret-access-key: ${env.CLOUDFLARE_R2_SECRET_ACCESS_KEY}   # Cloudflare R2 Secret Access Key: 用于访问 Cloudflare R2 API 的 Secret Access Key
            account-id: ${env.CLOUDFLARE_R2_ACCOUNT_ID}                 # Cloudflare R2 账户 ID: 用于访问 Cloudflare R2 API 的账户 ID
            bucket-name: lease                                          # Cloudflare R2 存储桶名称: 用于存储文件的存储桶名称
            endpoint: ${env.CLOUDFLARE_R2_ENDPOINT}                     # Cloudflare R2 服务地址: 云存储服务地址
            max-file-sizeof-bytes: 10485760000                          # 最大文件大小: 10 GB，即最大支持上传 10 GB 的文件
            large-file-threshold-of-bytes: 104857600                    # 大文件大小: 100 MB，即大于 100 MB 的文件将使用分片上传
    minio:
        bucket-name: ${env.LEASE_MINIO_BUCKET_NAME}                   # MinIO 存储桶名称: 用于存储文件的存储桶名称
        endpoint: ${env.LEASE_MINIO_ENDPOINT}                         # MinIO 服务地址: 本地 MinIO 服务地址
        access-key-id: ${env.LEASE_MINIO_ACCESS_KEY_ID}               # MinIO 访问密钥 ID: 用于访问 MinIO 服务的访问密钥 ID
        secret-access-key: ${env.LEASE_MINIO_SECRET_ACCESS_KEY}       # MinIO 访问密钥: 用于访问 MinIO 服务的访问密钥
        large-file-threshold-of-bytes: 104857600                      # 大文件大小: 100 MB，即大于 100 MB 的文件将使用分片上传
        max-file-sizeof-bytes: 10485760000                            # 最大文件大小: 10 GB，即最大支持上传 10 GB 的文件


springdoc:
    default-flat-param-object: true                                   # 默认扁平化参数对象: 使用扁平化参数对象，即将参数对象的属性展开到请求参数中
auth:
    captcha:
        captcha-height: 40                                            # 验证码高度: 40 像素
        captcha-width: 100                                            # 验证码宽度: 100 像素
        captcha-length: 1                                             # 验证码长度: 1 位
        captcha-ttl-millis: 60000                                     # 验证码有效期: 60 秒，即验证码有效期为 1 分钟
    jwt:
        ttl-millis: 86400000                                          # JWT 有效期: 24 小时，即 JWT 有效期为 1 天
        secret: ${env.LEASE_JWT_SECRET}                                         # JWT 密钥: 用于签名 JWT 的密钥
        allow-clock-skew-millis: 300000                               # 允许时钟偏移: 5 分钟，即允许 JWT 时钟与服务器时钟的最大偏移量为 5 分钟
    interception:
        exclude-path-patterns: [ /admin/login, /user/login, /user/register, /captcha, /doc.html ] # 排除路径模式: 不拦截 /admin/login、/user/login、/user/register、/captcha 和 /doc.html 路径下的请求
        include-path-patterns: [ /api/** ]                            # 包含路径模式: 只拦截 /api/** 路径下的请求
        exclude-http-methods: [ OPTIONS ]                             # 排除 HTTP 方法: 不拦截 OPTIONS 请求
        include-http-methods: [ GET, POST, PUT, DELETE ]              # 包含 HTTP 方法: 只拦截 GET、POST、PUT 和 DELETE 请求