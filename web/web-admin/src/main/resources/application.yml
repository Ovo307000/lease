spring:
  datasource:
    type: com.zaxxer.hikari.HikariDataSource                    # 数据库连接池类型: HikariCP，一个高性能的 JDBC 连接池
    url: jdbc:mysql://localhost:3306/lease?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8    # 数据库连接地址: 本地 MySQL，数据库名为 lease，设置编码等参数
    username: root                                              # 数据库登录用户名: root 用户（建议在生产环境中使用更安全的账户）
    password: root                                              # 数据库登录密码: 与用户名对应的密码
    hikari:
      connection-test-query: SELECT 1                           # 连接测试查询: 用于检查数据库连接是否仍然有效
      connection-timeout: 60000                                 # 连接超时时间: 60 秒，即建立连接最多等待 1 分钟
      idle-timeout: 500000                                      # 空闲连接超时: 500 秒，即空闲连接在连接池中最多保留 8.3 分钟
      max-lifetime: 540000                                      # 连接最大生存时间: 540 秒，即一个连接在池中最多存在 9 分钟
      maximum-pool-size: 12                                     # 连接池最大大小: 最多同时维护 12 个数据库连接
      minimum-idle: 10                                          # 最小空闲连接: 连接池中至少保持 10 个空闲连接
      pool-name: SPHHikariPool                                  # 连接池名称: 用于日志和监控，方便识别不同的连接池
    driver-class-name: com.mysql.cj.jdbc.Driver                 # MySQL 驱动类名: 用于连接 MySQL 数据库的 JDBC 驱动
  application:
    name: web-admin                                             # 应用名称: Web 管理端，用于 Loggers 日志记录
  servlet:
    multipart:
      max-file-size: ${storage.cloudflare.r2.max-file-sizeof-bytes}    # 最大文件大小: 10 GB，即最大支持上传 10 GB 的文件
      max-request-size: ${storage.cloudflare.r2.max-file-sizeof-bytes} # 最大请求大小: 10 GB，即最大支持上传 10 GB 的文件

mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl       # SQL 日志实现: 将 MyBatis 生成的 SQL 语句打印到控制台，便于调试
  global-config:
    db-config:
      logic-delete-field: is_deleted                            # 逻辑删除字段: 数据表中表示删除状态的字段名 （如果 @TableLogic 注解用到了该字段
      logic-delete-value: 1                                     # 逻辑删除值: 表示数据已被删除的标记值
      logic-not-delete-value: 0                                 # 逻辑未删除值: 表示数据未被删除的标记值


server:
  port: 8861                                                    # 应用服务端口: Web 应用监听的 HTTP 端口号，默认是 8080

storage:
  cloudflare:
    r2:
      access-key-id: dbd8ba9c43297141aff8ab3a8770ab2c72e10        # Cloudflare R2 Access Key ID: 用于访问 Cloudflare R2 API 的 Access Key ID
      secret-access-key: wRMvm7oFNYj_y_MpFgLMIv4FPLvMLxRhMkTZ11Di # Cloudflare R2 Secret Access Key: 用于访问 Cloudflare R2 API 的 Secret Access Key
      account-id: 6f2186c3068ec2904175ebeec00ae9d0                # Cloudflare R2 账户 ID: 用于访问 Cloudflare R2 API 的账户 ID
      bucket-name: lease                                          # Cloudflare R2 存储桶名称: 用于存储文件的存储桶名称
      endpoint: https://6f2186c3068ec2904175ebeec00ae9d0.r2.cloudflarestorage.com # Cloudflare R2 存储桶地址: 用于访问 Cloudflare R2 存储桶的地址
      max-file-sizeof-bytes: 10485760000                          # 最大文件大小: 10 GB，即最大支持上传 10 GB 的文件
      large-file-threshold-of-bytes: 104857600                    # 大文件大小: 100 MB，即大于 100 MB 的文件将使用分片上传
  minio:
    bucket-name: lease                                            # MinIO 存储桶名称: 用于存储文件的存储桶名称
    endpoint: http://localhost:9000                               # MinIO 服务地址: 本地 MinIO 服务地址
    access-key-id: RHwAeWRZa3xd9vFTnmN3                           # MinIO 访问密钥 ID: 用于访问 MinIO 服务的访问密钥 ID
    secret-access-key: jOGfEf2hUYCFvCEiIyHwskET16oJf0uyfx2KamzD   # MinIO 访问密钥: 用于访问 MinIO 服务的访问密钥
    large-file-threshold-of-bytes: 104857600                      # 大文件大小: 100 MB，即大于 100 MB 的文件将使用分片上传
    max-file-sizeof-bytes: 10485760000                            # 最大文件大小: 10 GB，即最大支持上传 10 GB 的文件

springdoc:
  default-flat-param-object: true                                 # 默认扁平化参数对象: 使用扁平化参数对象，即将参数对象的属性展开到请求参数中
